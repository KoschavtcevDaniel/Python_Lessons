# Класс «Снежинка» (SnowFlake)
#
# При инициализации класс принимает целое нечетное число – сторону квадрата, в который вписана снежинка.
#
# Методы:
# – thaw() – таять, при этом на каждом шаге пропадают крайние звездочки со всех сторон; параметр показывает, сколько шагов прошло.
# – freeze(n) – намораживаться, при этом сторона квадрата, в который вписана снежинка, увеличивается на 2 * n, одновременно добавляются звездочки в нужных местах, чтобы правило соблюдалось.
# – thicken() – утолщаться, ко всем линиям звездочек с двух сторон добавляются параллельные (если перед этим снежинка таяла, то теперь звездочки восстанавливаются).
# – show() – показывать (рисуется снежинка в виде квадратной матрицы со звездочками и дефисами в пустых местах).
#
# Создать класс-наследник от класса «Снежинка», например, «Украшенная снежинка».
#
# Обязательно использование конструктора, декораторов и метода __str__.

class SnowFlake(object):
    def __init__(self, x):
        self.x = x
        snow = [[None] for _ in range(x)] * x
        for i in range(x):
            for j in range(x):
                if (i + j) % 2 == 0:
                    snow[i][j] = '*'
                else:
                    snow[i][j] = '-'

    def thaw(self, f):
        snow = self.snow
        for i in range(self.x):
            for j in range(self.x):
                if i == 0 or i == x-1 or j == 1 or j == x-1:
                    snow[i][j] = '-'
        f()
        pass

    def freeze(self, n):
        return self.x + 2 * n

    def thicken(self):
        pass

    def show(self):
        pass

    def __str__(self):
        return f"self.name"


class DecoratedSnowFlake(SnowFlake):
    pass

